# -*- coding: utf-8 -*-
"""Healy_Sprint3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13K9S_SZn9jdjF0-ypVPxPRYxhm4SR_XV

# Healy
#### YOUR HEALTH AI

Já desejou saber os riscos que permeiam sua saúde? Com Healy podemos identificar o padrão que aparece nos seus exames e com ele indicar a porcentagem de propensão à uma patologia levando você a conhecer mais sobre sua saúde.

<br>

[Download do dataset](https://www.kaggle.com/datasets/davidechicco/chronic-kidney-disease-ehrs-abu-dhabi)

# Importando modelo da Logistic Regression
Anteriormente foi realizada uma análise comparativa de modelos distintos com 2 tipos de validação e a melhor performance é oriunda do modelo de Regressão Logística com Stratified Fold.
"""

# imports
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import StratifiedKFold

# import do dataset
kidney = pd.read_csv("/content/ChronicKidneyDisease_EHRs_from_AbuDhabi.csv")

# definindo variáveis preditivas
X = kidney[['Sex', 'HistoryDiabetes', 'HistoryCHD', 'HistoryVascular', 'HistorySmoking', 'HistoryDLD',
        'DLDmeds', 'ACEIARB']]

# definindo variável alvo
y = kidney['EventCKD35']

# separando dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# separando treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# treinando a regresssão logística
regression = LogisticRegression()
regression.fit(X_train, y_train)

# fazendo previsões
y_pred = regression.predict(X_test)

# predição com modelo original
accuracy = accuracy_score(y_test, y_pred)
print("Acurácia:", accuracy)

# predição com validação cruzada stratified fold
skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
scores_stratified = cross_val_score(regression, X, y, cv=skf, scoring='accuracy')

print("Acurácia em cada fold:", scores_stratified)
print("Acurácia média:", scores_stratified.mean())

"""# Importando dados do usuário
Segundo demonstrado na primeira parte, as colunas mais importantes para identificação de uma possível ascensão a um quadro clínico de doença renal são:
<br>
Sex, AgeBaseline, HistoryDiabetes, HistoryCHD, HistoryVascular, HistorySmoking, HistoryHTN, HistoryDLD, DLDmeds, DMmeds, HTNmeds, ACEIARB, CreatinineBaseline e sBPBaseline

"""

display(kidney)

# solicitando inputs
sex = input("Qual o seu sexo? (M/F): ")
historyDiabetes = input("Você tem histórico de diabetes? (S/N): ")
historyCHD = input("Você tem histórico de doença cardíaca? (S/N): ")
historyVascular = input("Você tem histórico de doença vascular? (S/N): ")
historySmoking = input("Você tem histórico de fumo? (S/N): ")
historyDLD = input("Você tem dislipidemia? (S/N): ")
DLDmeds = input("Você consome medicamentos para dislipidemia? (S/N): ")
ACEIARB = input("Você usa medicamentos para tratamento de pressão arterial? (S/N): ")

inputs = []
# del inputs[:]
print(inputs)

# tratando a variável sexo
if sex == "M":
  inputs.append(1)
else:
  inputs.append(0)

# tratando variáveis históricas
for history in [historyDiabetes, historyCHD, historyVascular, historySmoking, historyDLD, DLDmeds, ACEIARB]:
  if history == 'S':
    inputs.append(1)
  else:
    inputs.append(0)

print(inputs)

# criando o array X_test
X_test = np.array(inputs).reshape(1, -1)

# imprimindo o array
print(X_test)

"""# Aplicando o modelo
Indicando tratamento ao usuário com base na probabilidade de desenvolvimento da enfermidade indicada pelo modelo comparativo Healy.
"""

# fazendo a predição para visualizar a probabilidade de classe 1 (positiva)
prediçao = regression.predict(X_test)[0]
probabilidade = regression.predict_proba(X_test)[0][1]

print(f"Predição: {prediçao}")
print(f"Probabilidade de classe positiva: {probabilidade}")

# fazendo a recomendação
if probabilidade > 0.3:
  print("""
  O tratamento para DRC tem como objetivo prevenir a progressão da doença, impedindo que seja desenvolvida uma falência renal, além de ser útil para aliviar os sintomas. O tratamento indicado pelo nefrologista pode variar de acordo com o estado geral de saúde da pessoa e o estágio da DRC
1. uso de remédios
2. mudar a alimentação
3. diálise
4. transplante renal
  """)
else:
  print(
      """
1. Controle a pressão arterial
    a. dieta com baixo teor de sal, exercícios físicos, controle do peso, moderação no consumo de bebidas ou medicamentos
2. Controlar níveis de glicose
3. Evitar medicamentos que fazem mal aos rins
    b. medicamentos, como anti-inflamatórios, usados de forma crônica podem danificar os rins ou o consumo
4. Controlar os valores do ácido úrico
5. Evitar o cigarro
6. Fazer exames de sangue e urina frequentemente
  """)